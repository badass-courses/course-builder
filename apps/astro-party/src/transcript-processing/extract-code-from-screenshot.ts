import { env } from '@/env.mjs'
import { performOCR, uploadImage } from '@/utils/aws'
import OpenAI from 'openai'

const openai = new OpenAI({
	apiKey: process.env.OPENAI_API_KEY,
})

export async function extractCodeFromScreenshot(screenshotUrl: string) {
	const imageDownload = await fetch(screenshotUrl)
	const contentType = imageDownload.headers.get('content-type') ?? undefined
	const contentLength =
		imageDownload.headers.get('content-length') != null
			? parseInt(imageDownload.headers.get('content-length')!)
			: undefined
	const body = await imageDownload.arrayBuffer()
	const bucketName = env.AWS_BUCKET_NAME || 'coursebuilderimages'
	const filename = `ocr/${Date.now()}.png`

	await uploadImage(
		bucketName,
		filename,
		Buffer.from(body),
		contentType!,
		contentLength!,
	)
	const text = await performOCR(bucketName, filename)

	const systemMessage =
		`You are an assistant specializing in reformatting code that has been OCR'd from a screenshot of a video. It is important that the code you return accurately reflects the code from the screenshot without adjusting its functionality or resolving any comments.`.trim()

	const input = `
  Please reformat this code I generated by running OCR on a video frame. Do not refactor the code, or attempt to solve any problems. If there is text included that comes from the frame but is not part of the code, leave it out. Simply fix any formatting issues or typos and leave the code intact. Include the detected language with the codefence so the code will have correct syntax highlighting.\n\n

  Please return ONLY the markdown codefence with the detected language and the code. Do not include any other text or formatting.\n\n
  """
  ${text}
  \n\n
`

	let response

	try {
		response = await openai.chat.completions.create({
			model: env.OPENAI_MODEL_ID,
			messages: [
				{
					role: 'system',
					content: systemMessage,
				},
				{
					role: 'user',
					content: input,
				},
			],
		})
	} catch (e) {
		console.error(`

      ERROR on GPT request:

      ${(e as Error).message}

    `)

		throw new Error('Error extracting code from screenshot')
	}

	const first_choice = response.choices[0]
	if (!first_choice) {
		throw new Error('No response from code extraction')
	}

	const message = first_choice.message

	if (!message) {
		throw new Error('No message in response from code extraction')
	}

	const content = message.content

	if (!content || content.length === 0) {
		throw new Error('No content in response from code extraction')
	}

	const code = content

	if (!code) {
		throw new Error('No code in response from code extraction')
	}

	return code
}
