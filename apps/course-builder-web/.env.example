# Since the ".env" file is gitignored, you can use the ".env.example" file to
# build a new ".env" file when you clone the repo. Keep this file up-to-date
# when you add new variables to `.env`.

# This file will be committed to version control, so make sure not to have any
# secrets in it. If you are cloning this repo, create a copy of this file named
# ".env" and populate it with your secrets.

# When adding additional environment variables, the schema in "/src/env.mjs"
# should be updated accordingly.

# Drizzle
# Get the Database URL from the "prisma" dropdown selector in PlanetScale
# Change the query params at the end of the URL to "?ssl={"rejectUnauthorized":true}"
DATABASE_URL='mysql://{USERNAME}:{PASSWORD}@aws.connect.psdb.cloud/{DATABASE_NAME}?ssl={"rejectUnauthorized":true}'

# Next Auth
# You can generate a new secret on the command line with:
# openssl rand -base64 32
# https://next-auth.js.org/configuration/options#secret
NEXTAUTH_SECRET="YOUR_SECRET"

# for webhooks use ngrok or similar for stable DNS accessible URL
NEXTAUTH_URL="SITE_URL"
UPLOADTHING_URL="SITE_URL"
NEXT_PUBLIC_URL="SITE_URL"

# Postmark
POSTMARK_API_KEY="sk_xxx"

# OpenAI Credentials to access gpt-4
OPENAI_API_KEY="sk_xxx"
OPENAI_MODEL_ID="gpt-4"
OPENAI_EMBEDDINGS_MODEL="text-embedding-ada-002"

# Sanity
SANITY_STUDIO_PROJECT_ID="YOUR_PROJECT_ID"
SANITY_STUDIO_DATASET="production"
SANITY_STUDIO_API_VERSION="2023-10-03"
SANITY_API_TOKEN="sk_xxx"

# Inngest
INNGEST_EVENT_KEY="ek_xxx"
INNGEST_SIGNING_KEY="sk_xxx"

# Mux
MUX_ACCESS_TOKEN_ID="YOUR_TOKEN_ID"
MUX_SECRET_KEY="sk_xxx"

# Github
GITHUB_CLIENT_ID="YOUR_CLIENT_ID"
GITHUB_CLIENT_SECRET="sk_xxx"

# PartyKit
NEXT_PUBLIC_PARTY_KIT_URL="http://127.0.0.1:1999"
NEXT_PUBLIC_PARTYKIT_ROOM_NAME="gpt-4-chain"

# DEEPGRAM
DEEPGRAM_API_KEY="sk_xxx"

# Uploadthing
UPLOADTHING_SECRET="sk_xxx"
UPLOADTHING_APP_ID="YOUR_APP_ID"